/*
 * Generated by gdbus-codegen 2.46.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SLAPTSERVICE_H__
#define __SLAPTSERVICE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.jaos.SlaptService */

#define TYPE_SLAPT_SERVICE (slapt_service_get_type ())
#define SLAPT_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SLAPT_SERVICE, SlaptService))
#define IS_SLAPT_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SLAPT_SERVICE))
#define SLAPT_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SLAPT_SERVICE, SlaptServiceIface))

struct _SlaptService;
typedef struct _SlaptService SlaptService;
typedef struct _SlaptServiceIface SlaptServiceIface;

struct _SlaptServiceIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_check_for_updates) (
    SlaptService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_refresh_cache) (
    SlaptService *object,
    GDBusMethodInvocation *invocation);

};

GType slapt_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *slapt_service_interface_info (void);
guint slapt_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void slapt_service_complete_check_for_updates (
    SlaptService *object,
    GDBusMethodInvocation *invocation,
    guint count);

void slapt_service_complete_refresh_cache (
    SlaptService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void slapt_service_call_check_for_updates (
    SlaptService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean slapt_service_call_check_for_updates_finish (
    SlaptService *proxy,
    guint *out_count,
    GAsyncResult *res,
    GError **error);

gboolean slapt_service_call_check_for_updates_sync (
    SlaptService *proxy,
    guint *out_count,
    GCancellable *cancellable,
    GError **error);

void slapt_service_call_refresh_cache (
    SlaptService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean slapt_service_call_refresh_cache_finish (
    SlaptService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean slapt_service_call_refresh_cache_sync (
    SlaptService *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_SLAPT_SERVICE_PROXY (slapt_service_proxy_get_type ())
#define SLAPT_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SLAPT_SERVICE_PROXY, SlaptServiceProxy))
#define SLAPT_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SLAPT_SERVICE_PROXY, SlaptServiceProxyClass))
#define SLAPT_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SLAPT_SERVICE_PROXY, SlaptServiceProxyClass))
#define IS_SLAPT_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SLAPT_SERVICE_PROXY))
#define IS_SLAPT_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SLAPT_SERVICE_PROXY))

typedef struct _SlaptServiceProxy SlaptServiceProxy;
typedef struct _SlaptServiceProxyClass SlaptServiceProxyClass;
typedef struct _SlaptServiceProxyPrivate SlaptServiceProxyPrivate;

struct _SlaptServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SlaptServiceProxyPrivate *priv;
};

struct _SlaptServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType slapt_service_proxy_get_type (void) G_GNUC_CONST;

void slapt_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SlaptService *slapt_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
SlaptService *slapt_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void slapt_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SlaptService *slapt_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
SlaptService *slapt_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SLAPT_SERVICE_SKELETON (slapt_service_skeleton_get_type ())
#define SLAPT_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SLAPT_SERVICE_SKELETON, SlaptServiceSkeleton))
#define SLAPT_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SLAPT_SERVICE_SKELETON, SlaptServiceSkeletonClass))
#define SLAPT_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SLAPT_SERVICE_SKELETON, SlaptServiceSkeletonClass))
#define IS_SLAPT_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SLAPT_SERVICE_SKELETON))
#define IS_SLAPT_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SLAPT_SERVICE_SKELETON))

typedef struct _SlaptServiceSkeleton SlaptServiceSkeleton;
typedef struct _SlaptServiceSkeletonClass SlaptServiceSkeletonClass;
typedef struct _SlaptServiceSkeletonPrivate SlaptServiceSkeletonPrivate;

struct _SlaptServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SlaptServiceSkeletonPrivate *priv;
};

struct _SlaptServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType slapt_service_skeleton_get_type (void) G_GNUC_CONST;

SlaptService *slapt_service_skeleton_new (void);


G_END_DECLS

#endif /* __SLAPTSERVICE_H__ */
